var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
define(["require", "exports", "vscode-languageserver-protocol", "vscode-languageserver-protocol/lib/common/utils/is"], function (require, exports, vscode_languageserver_protocol_1, Is) {
    /* --------------------------------------------------------------------------------------------
     * Copyright (c) 2018 TypeFox GmbH (http://www.typefox.io). All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     * ------------------------------------------------------------------------------------------ */
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConnection = void 0;
    function createConnection(connection, errorHandler, closeHandler) {
        connection.onError((data) => { errorHandler(data[0], data[1], data[2]); });
        connection.onClose(closeHandler);
        return {
            listen: () => connection.listen(),
            sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),
            onRequest: (type, handler) => connection.onRequest(Is.string(type) ? type : type.method, handler),
            sendNotification: (type, params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(Is.string(type) ? type : type.method, params); }),
            onNotification: (type, handler) => connection.onNotification(Is.string(type) ? type : type.method, handler),
            onProgress: (type, token, handler) => connection.onProgress(type, token, handler),
            sendProgress: (type, token, value) => __awaiter(this, void 0, void 0, function* () { return connection.sendProgress(type, token, value); }),
            trace: (value, tracer, sendNotification = false) => connection.trace(value, tracer, sendNotification),
            initialize: (params) => connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params),
            shutdown: () => connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined),
            exit: () => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type); }),
            onLogMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, handler),
            onShowMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, handler),
            onTelemetry: (handler) => connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, handler),
            didChangeConfiguration: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, params); }),
            didChangeWatchedFiles: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, params); }),
            didOpenTextDocument: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, params); }),
            didChangeTextDocument: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params); }),
            didCloseTextDocument: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, params); }),
            didSaveTextDocument: (params) => __awaiter(this, void 0, void 0, function* () { return connection.sendNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, params); }),
            onDiagnostics: (handler) => connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, handler),
            dispose: () => connection.dispose(),
            end: () => connection.end()
        };
    }
    exports.createConnection = createConnection;
});
//# sourceMappingURL=connection.js.map